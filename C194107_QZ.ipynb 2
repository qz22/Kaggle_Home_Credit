{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add caption and unit in the, and axis x and y; Prove guesses"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Green Taxi Trips!\n",
    "This report shows my analysis on Green Taxi trip data. The data is collected by the New York City Taxi and Limousine commission (TLC) about “Green” Taxis. It contains trip information of Green Taxis in September, 2015.\n",
    "\n",
    "The data includes fields capturing pick-up and drop-off dates/times, pick-up and drop-off locations, trip distances, itemized fares, rate types, payment types, and driver-reported passenger counts. Please refer the following file for description of each field. http://www.nyc.gov/html/tlc/downloads/pdf/data_dictionary_trip_records_green.pdf\n",
    "\n",
    "It consists of six parts:\n",
    "\n",
    "* Data overview\n",
    "\n",
    "* Distribution of 'Trip_distance'\n",
    "\n",
    "* Analysis of 'Trip_distance' grouped by hour of day; Identification of trips that originate or terminate at one of the NYC area airports.\n",
    "\n",
    "* Predictive modeling for tip percentage\n",
    "\n",
    "* Distribution of average speed \n",
    "\n",
    "* Appendix: python code\n",
    "\n",
    "Some background information of Green Taxis:\n",
    "\n",
    "Green Taxis (as opposed to yellow ones) are taxis in New York City that are only allowed to pick up passengers (street hails or calls) in outer boroughs (excluding John F. Kennedy International Airport and LaGuardia Airport unless arranged in advance) and in Manhattan above East 96th and West 110th Streets. \n",
    "\n",
    "Before Green Taxis exist, an analysis conducted by TLC showed that about 95% of yellow taxi pick-ups occurred in Manhattan below 96th Street and at JFK and LaGuardia (LGA) airports. This resulted in significantly lower access to legal taxi rides for people in outer boroughs. As a result, the Five Borough Taxi Plan was started with the Street Hail Livery program to allow \"Green Taxis\" to pick up street-hail passengers to fill in the gap.[1]\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Q1: Data Overview\n",
    "\n",
    "The data includes about 1.5 million trips and 21 fields. I grouped fields into four categories based on their characteristics:\n",
    "\n",
    "* Location related fields: 'Pickup_longitude', 'Pickup_latitude', 'Dropoff_longitude', 'Dropoff_latitude'\n",
    "\n",
    "* Time related fields: 'lpep_pickup_datetime', 'Lpep_dropoff_datetime'\n",
    "\n",
    "* Fare related fields: 'RateCodeID', 'Fare_amount', 'Extra', 'MTA_tax', 'Tip_amount', 'Tolls_amount', 'improvement_surcharge', 'Total_amount', 'Payment_type'\n",
    "\n",
    "* Others: 'VendorID', 'Trip_type ', 'Store_and_fwd_flag', 'Passenger_count', 'Trip_distance'\n",
    "\n",
    "The 'Ehail_Fee' field is null, so we can drop it. 'Trip_type' has 4 null values. All the other fields don't have null values.\n",
    "\n",
    "The code is in Appendix A."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Q2: Distribution of 'Trip_distance'\n",
    "\n",
    "'Trip_distance' is the elapsed trip distance in miles reported by the taximeter. Analyzing the distribution of Trip_distance can help us understand how long a Green taxi trip can be; a step further, may help us promoting the ride sharing.\n",
    "\n",
    "About 1.4% of all the trips in the data have zero in the 'Trip_distance' field, but their 'Fare_amount' are sometimes positive. I think those zeros may be noise because they can be missing values if corresponding 'Fare_amount'is positive, or those trips didn't even start. Both cases are not useful for the analysis of distribution of trip distance. So I removed trips with 'Trip_distance' equals zero. We may need to contact TLC to check why zero exis in 'Trip_distance' field.\n",
    "\n",
    "0.2% of all the trips (# 3394) in September have 'Trip_distnace' more than 20 miles, and two trips more than 200 miles. I don't think these are outliers, but are special cases. \n",
    "\n",
    "The average 'Trip_distance' is 3.01, the median is 2.00, and the variance is 0.47.\n",
    "\n",
    "The histogram and boxplot of ’Trip_distance‘ below show that the distribution is left skewed. I guess it may follow gamma distribution. I'd try to fit the parameters and estimate the distribution if I have extra time. \n",
    "\n",
    "The code is in Appendix B.\n",
    "\n",
    "<img src=\"1.png\">\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Q3\n",
    "## Engineer time related features \n",
    "\n",
    "Since we're going to use hour information to analyze 'Trip_distance', I first extracted hour and weekday information from time related fields('lpep_pickup_datetime', 'Lpep_dropoff_datetime' ), and derived four new fields ('lpep_pickup_hours', 'lpep_pickup_weekday', 'Lpep_dropoff_hour', 'Lpep_dropoff_weekday').\n",
    "\n",
    "The following distribution plot shows that most trips happened at around 17:00 - 19:00. At around 5:00 am, there are least trips across the day.\n",
    "\n",
    "<img src=\"2.png\">\n",
    "\n",
    "Also, I derived a new field 'Time_spent' which indicates the time spent in each trip by calculating the difference between 'lpep_pickup_datetime' and 'Lpep_dropoff_datetime'. The distribution of ’Time_spent‘ is as follows.\n",
    "\n",
    "The code is in Appendix C.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Appendix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Appendix A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load packages\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from datetime import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "from math import sin, cos, sqrt, atan2, radians\n",
    "import lightgbm as lgb\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn import preprocessing, model_selection, metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1494926 21\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>lpep_pickup_datetime</th>\n",
       "      <th>Lpep_dropoff_datetime</th>\n",
       "      <th>Store_and_fwd_flag</th>\n",
       "      <th>RateCodeID</th>\n",
       "      <th>Pickup_longitude</th>\n",
       "      <th>Pickup_latitude</th>\n",
       "      <th>Dropoff_longitude</th>\n",
       "      <th>Dropoff_latitude</th>\n",
       "      <th>Passenger_count</th>\n",
       "      <th>...</th>\n",
       "      <th>Fare_amount</th>\n",
       "      <th>Extra</th>\n",
       "      <th>MTA_tax</th>\n",
       "      <th>Tip_amount</th>\n",
       "      <th>Tolls_amount</th>\n",
       "      <th>Ehail_fee</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>Total_amount</th>\n",
       "      <th>Payment_type</th>\n",
       "      <th>Trip_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2015-09-01 00:02:34</td>\n",
       "      <td>2015-09-01 00:02:38</td>\n",
       "      <td>N</td>\n",
       "      <td>5</td>\n",
       "      <td>-73.979485</td>\n",
       "      <td>40.684956</td>\n",
       "      <td>-73.979431</td>\n",
       "      <td>40.685020</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>7.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.95</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.75</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2015-09-01 00:04:20</td>\n",
       "      <td>2015-09-01 00:04:24</td>\n",
       "      <td>N</td>\n",
       "      <td>5</td>\n",
       "      <td>-74.010796</td>\n",
       "      <td>40.912216</td>\n",
       "      <td>-74.010780</td>\n",
       "      <td>40.912212</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2015-09-01 00:01:50</td>\n",
       "      <td>2015-09-01 00:04:24</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>-73.921410</td>\n",
       "      <td>40.766708</td>\n",
       "      <td>-73.914413</td>\n",
       "      <td>40.764687</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.3</td>\n",
       "      <td>5.80</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>2015-09-01 00:02:36</td>\n",
       "      <td>2015-09-01 00:06:42</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>-73.921387</td>\n",
       "      <td>40.766678</td>\n",
       "      <td>-73.931427</td>\n",
       "      <td>40.771584</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.3</td>\n",
       "      <td>6.30</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2015-09-01 00:00:14</td>\n",
       "      <td>2015-09-01 00:04:20</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>-73.955482</td>\n",
       "      <td>40.714046</td>\n",
       "      <td>-73.944412</td>\n",
       "      <td>40.714729</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.3</td>\n",
       "      <td>6.30</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   VendorID lpep_pickup_datetime Lpep_dropoff_datetime Store_and_fwd_flag  \\\n",
       "0         2  2015-09-01 00:02:34   2015-09-01 00:02:38                  N   \n",
       "1         2  2015-09-01 00:04:20   2015-09-01 00:04:24                  N   \n",
       "2         2  2015-09-01 00:01:50   2015-09-01 00:04:24                  N   \n",
       "3         2  2015-09-01 00:02:36   2015-09-01 00:06:42                  N   \n",
       "4         2  2015-09-01 00:00:14   2015-09-01 00:04:20                  N   \n",
       "\n",
       "   RateCodeID  Pickup_longitude  Pickup_latitude  Dropoff_longitude  \\\n",
       "0           5        -73.979485        40.684956         -73.979431   \n",
       "1           5        -74.010796        40.912216         -74.010780   \n",
       "2           1        -73.921410        40.766708         -73.914413   \n",
       "3           1        -73.921387        40.766678         -73.931427   \n",
       "4           1        -73.955482        40.714046         -73.944412   \n",
       "\n",
       "   Dropoff_latitude  Passenger_count     ...      Fare_amount  Extra  MTA_tax  \\\n",
       "0         40.685020                1     ...              7.8    0.0      0.0   \n",
       "1         40.912212                1     ...             45.0    0.0      0.0   \n",
       "2         40.764687                1     ...              4.0    0.5      0.5   \n",
       "3         40.771584                1     ...              5.0    0.5      0.5   \n",
       "4         40.714729                1     ...              5.0    0.5      0.5   \n",
       "\n",
       "   Tip_amount  Tolls_amount  Ehail_fee  improvement_surcharge  Total_amount  \\\n",
       "0        1.95           0.0        NaN                    0.0          9.75   \n",
       "1        0.00           0.0        NaN                    0.0         45.00   \n",
       "2        0.50           0.0        NaN                    0.3          5.80   \n",
       "3        0.00           0.0        NaN                    0.3          6.30   \n",
       "4        0.00           0.0        NaN                    0.3          6.30   \n",
       "\n",
       "   Payment_type  Trip_type   \n",
       "0             1         2.0  \n",
       "1             1         2.0  \n",
       "2             1         1.0  \n",
       "3             2         1.0  \n",
       "4             2         1.0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load data\n",
    "url = 'https://s3.amazonaws.com/nyc-tlc/trip+data/green_tripdata_2015-09.csv'\n",
    "mdata = pd.read_csv( url )\n",
    "N, P = mdata.shape \n",
    "print( N, P )\n",
    "mdata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['VendorID', 'lpep_pickup_datetime', 'Lpep_dropoff_datetime',\n",
       "       'Store_and_fwd_flag', 'RateCodeID', 'Pickup_longitude',\n",
       "       'Pickup_latitude', 'Dropoff_longitude', 'Dropoff_latitude',\n",
       "       'Passenger_count', 'Trip_distance', 'Fare_amount', 'Extra',\n",
       "       'MTA_tax', 'Tip_amount', 'Tolls_amount', 'Ehail_fee',\n",
       "       'improvement_surcharge', 'Total_amount', 'Payment_type',\n",
       "       'Trip_type '], dtype=object)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show 21 field names \n",
    "mdata.columns.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VendorID                       0\n",
       "lpep_pickup_datetime           0\n",
       "Lpep_dropoff_datetime          0\n",
       "Store_and_fwd_flag             0\n",
       "RateCodeID                     0\n",
       "Pickup_longitude               0\n",
       "Pickup_latitude                0\n",
       "Dropoff_longitude              0\n",
       "Dropoff_latitude               0\n",
       "Passenger_count                0\n",
       "Trip_distance                  0\n",
       "Fare_amount                    0\n",
       "Extra                          0\n",
       "MTA_tax                        0\n",
       "Tip_amount                     0\n",
       "Tolls_amount                   0\n",
       "Ehail_fee                1494926\n",
       "improvement_surcharge          0\n",
       "Total_amount                   0\n",
       "Payment_type                   0\n",
       "Trip_type                      4\n",
       "dtype: int64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate number of null values in each field\n",
    "mdata.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Appendix B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of 0 in Trip_distance is 0.013774594862889566\n",
      "Mean of Trip_distance is 2.9681408511189864\n",
      "Median of Trip_distance is 1.98\n",
      "Variance of Trip_distance is 9.465595604595098\n",
      "Mean excluding 0 is 3.009596828127074\n",
      "Median excluding 0 is 2.0\n",
      "Variance excluding 0 records is 9.47303565902016\n"
     ]
    }
   ],
   "source": [
    "# Remove trips with 'Trip_distance' equals 0 because \n",
    "mdata_nonZero = mdata.loc[ mdata[ 'Trip_distance' ] != 0 ]\n",
    "\n",
    "# Calculate the number of trips that have 0 as 'Trip_distance'.\n",
    "print( 'Percentage of 0 in Trip_distance is', 1 - len( mdata_nonZero ) /N )\n",
    "\n",
    "# Calculate the mean/median/variance of 'Trip_distance'.\n",
    "print( 'Mean of Trip_distance is', mdata['Trip_distance' ].mean())\n",
    "print( 'Median of Trip_distance is', mdata['Trip_distance' ].median())\n",
    "print( 'Variance of Trip_distance is', mdata['Trip_distance' ].var())\n",
    "print( 'Mean excluding 0 is', mdata_nonZero['Trip_distance' ].mean())\n",
    "print( 'Median excluding 0 is', mdata_nonZero['Trip_distance' ].median())\n",
    "print( 'Variance excluding 0 records is', mdata_nonZero['Trip_distance' ].var())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use distribution plot and box plot to show the distribution of 'Trip_distance'\n",
    "sns.set(color_codes=True)\n",
    "fig, (ax1, ax2) = plt.subplots(ncols=2 )\n",
    "plt1 = sns.distplot( mdata_nonZero[ 'Trip_distance' ] , ax = ax1)\n",
    "plt1.set(xlabel='Trip_distance(mile)', ylabel='Percentage')\n",
    "plt1.set_title(\"Distribution plot of Trip_distance\") \n",
    "plt2 = sns.boxplot(x = mdata_nonZero[ 'Trip_distance' ], ax = ax2)\n",
    "plt2.set(xlabel= 'Trip_distance(mile)' )\n",
    "plt2.set_title(\"Boxplot of Trip_distance\") \n",
    "plt.show( )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of trips with Trip_distance more than 20 miles: 3394\n",
      "Percentage of trips with Trip_distance more than 20 miles: 0.002302056386137741\n"
     ]
    }
   ],
   "source": [
    "# Calculate the number/percentage of trips with 'Trip_distance' greater than 20 miles.\n",
    "n1 = len(mdata.loc[ mdata[ 'Trip_distance' ] >= 20 ])\n",
    "print( 'Number of trips with Trip_distance more than 20 miles:', n1 )\n",
    "print( 'Percentage of trips with Trip_distance more than 20 miles:', \\\n",
    "      n1 / len( mdata_nonZero ) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Trips of which 'Trip_distance' is more than 20 miles make the histogram/boxplot unclear, so I update histogram/boxplot withouth those cases, and the plots still show the distribution is left skewed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Remove trips with 'Trip_distance' greater than 20 miles, and build distribution / box plot again\n",
    "fig, (ax1, ax2) = plt.subplots( ncols=2 )\n",
    "sns.distplot( (mdata.loc[ mdata[ 'Trip_distance' ] < 20 ])['Trip_distance' ],\\\n",
    "             ax = ax1)\n",
    "sns.boxplot( (mdata.loc[ mdata[ 'Trip_distance' ] < 20 ])['Trip_distance' ], \\\n",
    "            ax = ax2 )\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Appendix C1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract hour and weekday information\n",
    "mdata[ 'lpep_pickup_datetime' ] = pd.to_datetime( \\\n",
    "                                mdata['lpep_pickup_datetime' ], \\\n",
    "                                format='%Y-%m-%d %H:%M:%S')\n",
    "mdata['lpep_pickup_hours'] = mdata.apply( \n",
    "                            lambda x: \n",
    "                            x['lpep_pickup_datetime' ].hour, \\\n",
    "                            axis=1)  \n",
    "mdata['lpep_pickup_weekday'] = mdata.apply(lambda x:\n",
    "                            x['lpep_pickup_datetime' ].dayofweek,\\\n",
    "                            axis=1)  \n",
    "\n",
    "mdata[ 'Lpep_dropoff_datetime' ] = pd.to_datetime( mdata['Lpep_dropoff_datetime' ], \\\n",
    "                                                  format='%Y-%m-%d %H:%M:%S')\n",
    "mdata['Lpep_dropoff_hour'] = mdata.apply(lambda x: \n",
    "                                    x['Lpep_dropoff_datetime' ].hour, \\\n",
    "                                    axis=1)\n",
    "mdata['Lpep_dropoff_weekday'] = mdata.apply(lambda x: \n",
    "                                    x['Lpep_dropoff_datetime' ].dayofweek,\n",
    "                                    axis=1)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate time spent on the trip  \n",
    "def Time_spent( row ):\n",
    "    diff = row['Lpep_dropoff_datetime' ] - row['lpep_pickup_datetime' ]\n",
    "    days = diff.days\n",
    "    days_to_hours = days * 24\n",
    "    diff_btw_two_times = (diff.seconds) / 3600\n",
    "    overall_hours = days_to_hours + diff_btw_two_times\n",
    "    return( overall_hours )\n",
    "\n",
    "mdata['Time_spent'] = mdata.apply(lambda row: Time_spent( row )  ,axis=1)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(color_codes=True)\n",
    "fig, (ax1, ax2) = plt.subplots(ncols=2 )\n",
    "plt1 = sns.distplot( mdata[ 'lpep_pickup_hours' ] , ax = ax1)\n",
    "plt1.set(xlabel='lpep_pickup_hours', ylabel='Percentage')\n",
    "plt1.set_title(\"Distribution of pickup hour of day\") \n",
    "\n",
    "plt2 = sns.distplot( mdata[ 'Lpep_dropoff_hour' ], ax = ax2)\n",
    "plt2.set(xlabel= 'Lpep_dropoff_hour' )\n",
    "plt2.set_title(\"Distribution of dropoff hour of day\") \n",
    "plt.show( )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt1 = sns.distplot( mdata[ 'Time_spent' ] )\n",
    "plt1.set(xlabel='Time_spent(hour)', ylabel='Percentage')\n",
    "plt1.set_title(\"Distribution of Time_spent\") \n",
    "plt.show(  )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 'Trip_distance' group by hour\n",
    "Given the analysis in Q2, I used data without trips with zero in 'Trip_distance'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "Distance_by_hour = mdata_nonZero.groupby('lpep_pickup_hours', \\\n",
    "                                as_index = False).agg(\\\n",
    "                                {'Trip_distance':[ 'mean', 'median', 'count', 'var']})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The line plot below is line plot of trip distance by hour of the day. \n",
    "\n",
    "It shows that 'Trip_distance' at around 5:00 am is the longest, while that around 17:00 is the shortest. \n",
    "\n",
    "At 17:00, I guess people usually take off from work and then take taxis to party or home which are usually near the work place, so the trip distance is short. \n",
    "\n",
    "People usually don't stay awake at 5:00am. The second plot below is the line plot of the number of trips by hour of day. It also shows that the number of trips at 5:00am is the smallest. I guess that, if people take taxi at that time, there may be some emergency or special cases, such as catching a flight. In this way, the trip distance is long."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot trip distance by hour of the day\n",
    "plt.plot( Distance_by_hour['lpep_pickup_hours'], \\\n",
    "         Distance_by_hour[('Trip_distance', 'mean')]) \n",
    "\n",
    "plt.plot( Distance_by_hour['lpep_pickup_hours'], \\\n",
    "         Distance_by_hour[('Trip_distance', 'median')])  \n",
    "\n",
    "plt.legend(['Mean', 'Median'], loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the number of trips by hour of the day\n",
    "plt.plot( Distance_by_hour['lpep_pickup_hours'], \\\n",
    "         Distance_by_hour[('Trip_distance', 'count')] )\n",
    "\n",
    "plt.legend(['Number of Trips'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Identify trips that originate or terminate at one of the NYC area airports.\n",
    "\n",
    "The plots below show that some trips have zero in Pickup_longitude/Pickup_latitude or Dropoff_longitude/Dropoff_latitude. I think we should remove those trips since zero doesn't make sense."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x10f5aac50>"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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n5+vd955p0YzWxewpzsuX77svTyn2+1WixYt9Lvf/U55eXneo9TMzEwlJSVJKr9k55YtW7zrz58/X0VFRdqxY0eNv9o6fPhwSdK9996re+65p9L1pK/l008/VY8ePdSmTRtJUs+ePRUZGam//e1vkqTu3burcePGksqPYgoKCvTNN99IKv9XMSSpR48e6tixY43mrEpWVpamT5+uoKAgRUZGql+/fpKk7777Tvv27VNBQYEWL17sve+rr76qdOEr+E8g7eutW7fWggULlJGRoePHj+uLL75QUVFRrd5vdbKyshQbG6uwsDCFhYXJ5XLp66+/liR99NFHOnTokNatWydJlf4CC3QBG+nvn6e74sqlBSUpNDS00k554sQJtWjRQpI0ePBgOY6jGTNmVPrxvuK35EtLSys9d8Wrx3k8nhpfTe77lzm88jpXfhwLDw/33h8UFOS90t73v7F/vde7sm5181d87MpzeTweOY6j1atXKyIiQpJ07ty5StdSgX8F0r7+97//XRMnTtSoUaPUq1cvdevWTbNmzarRutL19+Frzbh48WK1b99eknThwoVb5roit8zpjqr07NlT69evl1R+zmrkyJHea+L+6Ec/0q9//Wvl5ORozZo1klTp6Pbo0aPev6Wv2Lhxo6TyHfHYsWPq1q1bjefYvXu3Tpw4Ian8iCA3N1edO3eudp327dsrLCxMn3zyiaTy89PffPPNVTteSEiIN/aRkZE6deqU8vLy5DiOPvjgA+9yP/nJT7Ru3Tp5PB4VFBRo165dkqTGjRurS5cu3h8NL1y4oGHDhnkfR2Cwsq/v27dPDz74oH71q1+pe/fu2rVrl9xut6TyfbWq6Fa8v2nTpiotLdXRo0cl6ap9eOPGjSouLlZxcXGlU3K9e/fWypUr5TiOSkpKNGHCBK1atapGM1sXsEfSNTFz5kz99re/lcvlkuM4GjdunB588EHv4w0bNtS8efM0evRo9ejRQxMmTFBycrI+/vhj3X333ZUuoSpJn3/+udasWSOPx6NFixbV+Ip3HTp0UEpKip577jm53W6Fh4crLS3tmhfeDw0N1dKlS5WSkqLXXntNMTExuv322xUeHq5Lly55l+vSpYveeOMNPffcc1q2bJni4+P15JNPKioqSo8++qgOHTokSZo8ebJSUlI0cOBARUZG6p577vE+x8KFC/Xyyy/L5XKppKREsbGxGjx4cI3eG2ywsq/HxsZq+/btGjhwoDwej/r27auCggJdvHhRHTp0UMOGDfXUU09p0aJF3nUq3r927VolJSXp2WefVWRkpAYMGOBdLj4+Xjk5OYqNjVXz5s3Vrl0772MvvviiXnnlFblcLpWWlurhhx/WM888U9fNaQpXwauhTp06KSsrS5GRkfX2mvPnz9eYMWN0++23Kzc3V3Fxcdq5c6f3n/QBbgZ/7Ouo3i19JH2zffrpp9V+quKhhx7S9OnTb+j5W7durVGjRik0NFSO42jOnDkEGn5xs/d1VI8jaQAw7Jb+H4cAEOiINAAYRqQBwDAiDQCGEWkAMIxIA4Bh/w8KaDT1hYYZwgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Box plot of longitude/latitude\n",
    "fig, (ax1, ax2) = plt.subplots(ncols=2 )\n",
    "sns.boxplot( x = mdata[ 'Pickup_longitude'], ax = ax1 )\n",
    "sns.boxplot( x = mdata[ 'Pickup_latitude'], ax = ax2 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1f1cbeba8>"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(ncols=2 )\n",
    "sns.boxplot( x = mdata[ 'Dropoff_longitude'], ax = ax1 )\n",
    "sns.boxplot( x = mdata[ 'Dropoff_latitude'], ax = ax2 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I calculated the distance between pickup/dropoff location and JFK/LGA based on (longitude, latitude) with the code in this link (https://stackoverflow.com/questions/19412462/getting-distance-between-two-points-based-on-latitude-longitude).\n",
    "\n",
    "Four new fields are generated:\n",
    "* 'Pickup_To_JFK': distance between pickup location and JFK\n",
    "* 'Drop_To_JFK': distance between dropoff location and JFK\n",
    "* 'Pickup_To_LGA': distance between pickup location and LGA\n",
    "* 'Drop_To_LGA': distance between dropoff location and JFK\n",
    "\n",
    "Code is as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the distance between pickup/dropoff location and JFK/LGA\n",
    "\n",
    "JFK = { 'lat': 40.6413, 'lon': -73.7781 }\n",
    "LGA = { 'lat': 40.7769, 'lon': -73.8740 }\n",
    "Airports = [ JFK, LGA ]\n",
    "\n",
    "R = 6373.0 # approximate radius of earth in mile\n",
    "\n",
    "def Distance_Airport( row ):\n",
    "    rlt = []\n",
    "    pick = { 'lat': row[ 'Pickup_latitude'], 'lon': row[ 'Pickup_longitude'] }\n",
    "    drop = { 'lat': row[ 'Dropoff_latitude'], 'lon': row[ 'Dropoff_longitude'] } \n",
    "    locs = { 'pick': pick, 'drop': drop}\n",
    "    for val in Airports:\n",
    "        lat1 = radians( val['lat'] )\n",
    "        lon1 = radians( val['lon'])\n",
    "        for val2 in [pick, drop]:\n",
    "            lat2 = radians( val2['lat'] )\n",
    "            lon2 = radians( val2['lon'] )\n",
    "            dlon = abs( lon2 - lon1 )\n",
    "            dlat = abs( lat2 - lat1 )\n",
    "            a = sin( dlat / 2)**2 + cos( lat1 ) * cos( lat2 ) * sin( dlon / 2)**2\n",
    "            c = 2 * atan2(sqrt(a), sqrt(1 - a))\n",
    "            distance = R * c * 0.62\n",
    "            rlt.append( distance )\n",
    "    return {'Pickup_To_JFK': rlt[0], 'Drop_To_JFK': rlt[1],\\\n",
    "            'Pickup_To_LGA': rlt[2], 'Drop_To_LGA': rlt[3] }\n",
    "\n",
    "mdata = mdata.merge( mdata[['Pickup_latitude','Dropoff_latitude', \\\n",
    "                        'Pickup_longitude', 'Dropoff_longitude']].apply(lambda \\\n",
    "                        row: pd.Series( Distance_Airport(row) ), axis=1),\\\n",
    "             left_index=True, right_index=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since I can only get one (longitude, latitude) to represent LGA or JFK, I assume that if the distance between pickup/dropoff location and any one of JFK or LGA is less than 1 mile, those trips originated or terminated at one of the NYC area airports. \n",
    "\n",
    "Five new fields are generated:\n",
    "* 'Is_Pickup_JFK': that trip originated at JFK\n",
    "* 'Is_Drop_JFK': that trip terminated at JFK\n",
    "* 'Is_Pickup_LGA': that trip originated at LGA\n",
    "* 'Is_Drop_LGA': that trip terminated at LGA\n",
    "* 'Is_Airport': that trip originated or terminated at one of the NYC area airports.\n",
    "\n",
    "Code is as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "buffer = 1 # mile\n",
    "def Label_Airport( row ):\n",
    "    rlt = []\n",
    "    for key in ['Pickup_To_JFK','Drop_To_JFK','Pickup_To_LGA','Drop_To_LGA']:\n",
    "        if row[key] <= buffer:\n",
    "            rlt.append( 1 )\n",
    "        else:\n",
    "            rlt.append( 0 )\n",
    "    return {'Is_Pickup_JFK': rlt[0], 'Is_Drop_JFK': rlt[1],\\\n",
    "            'Is_Pickup_LGA': rlt[2], 'Is_Drop_LGA': rlt[3] }\n",
    "\n",
    "mdata = mdata.merge( mdata[['Pickup_To_JFK','Drop_To_JFK',\\\n",
    "                            'Pickup_To_LGA','Drop_To_LGA']].apply(lambda \\\n",
    "                            row: pd.Series( Label_Airport( row ) ), axis=1),\\\n",
    "             left_index=True, right_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "mdata['Is_Airport'] = mdata.apply( lambda row: row['Is_Pickup_JFK'] == 1 \\\n",
    "                                    or row['Is_Drop_JFK'] == 1 or row['Is_Pickup_LGA'] == 1 \n",
    "                                        or row['Is_Drop_LGA']==1, axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After removing trips with zero in 'Pickup_longitude'/'Pickup_latitude' or 'Dropoff_longitude'/'Dropoff_latitude', about 42k out of all the 1.5 million trips (about 2.8%) originated or terminated at one of the NYC area airports. \n",
    "\n",
    "A step further, we can also try to use different criteria and see the changes to result.\n",
    "\n",
    "Calculation is as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of trips that originate or terminate at one of the NYC area airports:  41983\n",
      "percentage of trips that originate or terminate at one of the NYC area airports:  0.028083664341913915\n"
     ]
    }
   ],
   "source": [
    "# Calculate the number of trips that originated or terminated at any of airports\n",
    "mdata_nonZero_Loc = mdata.loc[ (mdata['Pickup_longitude']!=0) &\\\n",
    "                              (mdata['Pickup_latitude']!=0) & \\\n",
    "                              (mdata['Dropoff_longitude']!=0) &\\\n",
    "                              (mdata['Dropoff_latitude']!=0)]\n",
    "\n",
    "Is_airport = mdata_nonZero_Loc.loc[ mdata_nonZero_Loc['Is_Airport'] == 1 ]\n",
    "\n",
    "print( 'number of trips that originate or terminate \\\n",
    "at one of the NYC area airports: ', len(Is_airport) )\n",
    "\n",
    "print( 'percentage of trips that originate or terminate \\\n",
    "at one of the NYC area airports: ', len(Is_airport)/N )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I separate all the trips to two groups: those originated or terminated at airports, and the others. The following table shows the average and variance of multiple fields for each group. Fare Amount is higher for trips related to airports than those not for airports. This may be because those airport-related trips are usually longer in terms of both trip distance and time spent than others."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">Fare_amount</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Trip_distance</th>\n",
       "      <th colspan=\"2\" halign=\"left\">lpep_pickup_hours</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Time_spent</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>var</th>\n",
       "      <th>mean</th>\n",
       "      <th>var</th>\n",
       "      <th>mean</th>\n",
       "      <th>var</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Is_Airport</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>1449394</td>\n",
       "      <td>12.157139</td>\n",
       "      <td>2.824291</td>\n",
       "      <td>8.059851</td>\n",
       "      <td>13.570220</td>\n",
       "      <td>46.734237</td>\n",
       "      <td>0.334695</td>\n",
       "      <td>2.630953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>41983</td>\n",
       "      <td>25.807917</td>\n",
       "      <td>8.057349</td>\n",
       "      <td>31.263511</td>\n",
       "      <td>12.336732</td>\n",
       "      <td>27.775585</td>\n",
       "      <td>0.451201</td>\n",
       "      <td>1.860360</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Fare_amount            Trip_distance            lpep_pickup_hours  \\\n",
       "                 count       mean          mean        var              mean   \n",
       "Is_Airport                                                                     \n",
       "False          1449394  12.157139      2.824291   8.059851         13.570220   \n",
       "True             41983  25.807917      8.057349  31.263511         12.336732   \n",
       "\n",
       "                      Time_spent            \n",
       "                  var       mean       var  \n",
       "Is_Airport                                  \n",
       "False       46.734237   0.334695  2.630953  \n",
       "True        27.775585   0.451201  1.860360  "
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mdata_nonZero_Loc.groupby(['Is_Airport']).agg( { 'Fare_amount':[ 'count', 'mean'],\n",
    "                                                 'Trip_distance': [ 'mean', 'var' ], \n",
    "                                                 'lpep_pickup_hours': ['mean', 'var'],\n",
    "                                                 'Time_spent': ['mean', 'var']} )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# May add some location plots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Q4: Analysis of tip percentage\n",
    "\n",
    "Analysis of tip percentage can help us understand the degree of satisfaction of riders, or the behavior pattern of tipping of riders. \n",
    "\n",
    "Some trips have negative Tip_amount. The field description indicates that \"Tip amount – This field is automatically populated for credit card tips. Cash tips are not included\", which mean that 'Tip_amount' field may only be available when 'Payment_type' equals one; when 'Payment_type' is 'Cash', there may be tips but that data is not available.\n",
    "\n",
    "The boxplot below shows that 'Tip_amount' is around zero or negative when 'Payment_type' is 'No_charge', 'Dispute' or 'Unknown'. For 'Cash', only small amount of trips have positive Tip_amount. \n",
    "\n",
    "So I think we should only keep trips with 'Payment_type' equals one for this analysis. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x32eea6860>"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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OFRmrVq1YvLkyZw/f56srCzmzJnD3XffTXp6Omlpac7OKAawdu1qfvzxR1fHEJGblEOHGT/77DMsFgsfffRRgekJCQmYTCZ+//13p4QT45g1azomE4wf/7Cro4jITcihMtu6dSseHh7OziIiInJdHDrM2KZNGz7++GNSUlKcnUdEROSaOVRmc+bMwWw2061bN1588UVWrlyp+5iJiEip4VCZ1a1bl+joaJYvX06nTp147733aNu2LZ9//jnZ2dnOzigiIlIkh2/OuWfPHmJjY3n33Xe57777iImJ4ciRI/zrX/9yZj4REZGrcugEkGeeeYZDhw4RFRXFvHnzuOWWWwB47LHH8PX1dWpAERGRq3H4qvlPPfVUgTMa09PTqVq1KitWrHBaOBEREUc4dJhx6tSpl52a361bNwAqVapU/KnEcLKzs/T5qYi4TJF7Zs899xy//vormZmZNG/e3D7darXSpEkTp4cT47BYLK6OICI3sSLLbMKECaSlpTF48GBGjhz510Lu7tSqVQuA8+fPU7FiReemFBERKUKRZebl5YWXlxfTp08vdJ5u3brp6vkiIuJSDp+aXxh9eVpERFzthstMt4IRERFXc+jU/Bt1+PBh2rZty9SpU/H397dPb9OmDdOnT+e222674W2MGzcOgJdffvmG1yUXpaWlMn78x5hM8NJLr1G1qrd9+sSJ46hZ8xbWrVvpyogiIkAx7Jk5ysPDg7feeouMjIyS2qTcoMTEePbu/T/27Pk/FiyIKzB99+6dKjIRKTVKrMxq165Ny5Ytef/99y97buLEibRr147w8HBGjRp11dO8ExMTadeuHaGhoQwcOJCcnBwAfvnlF7p06ULr1q3te2oZGRlER0fTuXNnWrduzeDBg7HZbGzYsIGoqCgiIyN58803OXv2LH379iU0NJR//vOfdOjQgcOHD2OxWBg5ciQdO3akffv2TJs2rdjHpjRKS0slKWml/fGaNatIT08jLS2VNWtWFfpZ6cCBr5VQQhGRvzhUZlf6xZWeng5wTaflDxw4kDVr1rB27Vr7tNWrL96heP78+cTHx3PgwAFmz55d6DqOHTvGyJEjmTp1KosWLcJisbBq1SoATp06xfTp05k/fz5TpkwhIyODlStXct999zFnzhyWLFnCpk2b2L59OwD79+/nyy+/5P3332fChAk0bNiQRYsW0b9/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m81mGz9+vC02Nrako13mzz//tLVu3dqWmppqO3funC08PNy2e/duV8cqwGq12gICAmw5OTn2aaUt99atW21hYWG2xo0b2w4dOmS7cOGCLSgoyHbw4EFbTk6O7fnnn7etXLnSZrPZbKGhobaff/7ZZrPZbIMGDbLNnDnTpVltNpstLCzMduzYsQLzFfUaSsratWttnTt3tmVlZdmys7NtPXr0sCUmJpbKsb1S1h9++KHUju2GDRtsXbp0seXk5NguXLhga926te3333932dhqz6wU+vXXX4mPjyc8PJw33niD9PR0cnJy2LRpE08++SQAkZGRLF682MVJL/4V5uvri7e3NxUrVuTJJ58sFbny27t3LwDPP/887du356uvvip1uefOncs777xD7dq1Afjll19o0KAB9erVw93dnfDwcBYvXsyRI0fIzMzkwQcfBFzzc3Bp1gsXLpCSksLgwYMJDw9n7NixWK3WQl9DSapVqxYDBw7E09MTDw8P7rzzTvbv318qx/ZKWVNSUkrt2D7yyCNMnz4dd3d3Tp06hcVi4cyZMy4bW5VZKVSrVi369evHggULuPXWWxk6dCipqal4eXnh7u5un+fYsWMuTgrHjx+nVq1a9se1a9cuFbnyO3PmDH5+fkyYMIFp06Yxe/ZsUlJSSlXu4cOH06JFC/vjwsb10umu+Dm4NOvJkyfx9fVlxIgRzJ07l82bNzNv3rxS8bNx991323+B7t+/n++//x6TyVQqx/ZKWQMDA0vt2AJ4eHgwduxYQkND8fPzc+nPrcrMhb7//ntatWpV4L+ePXsyYcIEHnroIUwmE7169SIpKQmbzYbJVPC2CJc+dgWr1Vogx5VyulqzZs2IjY2lcuXKVK9enaioKMaOHVuqcxc2rqVxvOvVq8eECROoXbs2FSpUoHv37qxatapUZd29ezfPP/88//73v6lXr16pHtv8We+4445SP7bR0dEkJydz9OhR9u/f77Kx1f3MXCgkJISQkJAC086ePcu0adPo2bMncPFNN5vNVK9enbNnz2KxWDCbzZw4ccJ+mMeVbrnlFjZv3mx/XFpy5bd582ZycnLw8/MDLo6pj48PJ06csM9T2nLfcsstV8x36fSTJ0+6PPfOnTvZv3+//RC4zWbD3d290NdQ0rZs2UJ0dDSDBw8mNDSUjRs3ltqxvTRraR7bPXv2kJ2dzX333UeFChUIDg5m8eLFmM3my3KVxNhqz6yUqVixIp9//jnbtm0D4KuvvuKJJ57Aw8ODFi1a8N133wHw7bff0qpVK1dGBaBly5YkJydz+vRpLly4wA8//FAqcuV39uxZYmNjycrKIiMjg/j4eEaPHl2qczdt2pR9+/Zx4MABLBYLCxcupFWrVvj4+FCuXDm2bNkCQEJCgstz22w2RowYYf9sd86cOTzxxBOFvoaSdPToUfr3788HH3xAaGgoUHrH9kpZS/PYHj58mJiYGLKzs8nOzmb58uV06dLFZWOrPbNSxmw289///pd3332XzMxMbr/9dvspuu+88w4DBw7k008/5dZbb+Wjjz5ycVqoU6cOr776Kj169CAnJ4eoqCgeeOABV8cqoHXr1mzbto0OHTpgtVrp2rUrDz30UKnOXa5cOUaNGsXLL79MVlYWQUFBPPXUUwB88MEHxMTEkJGRQePGjenRo4dLs95777306dOHZ555htzcXIKDgwkLCwMo9DWUlClTppCVlcWoUaPs07p06VIqx7awrKV1bIOCgvjll1/o0KEDZrOZ4OBgQkNDqV69ukvGVneaFhERw9NhRhERMTyVmYiIGJ7KTEREDE9lJiIihqcyExERw9Op+SIuNGzYMDZt2gRc/BKqj48P5cuXByAzM5NvvvmGKlWquDJisTl06BCxsbGMGzfO1VGkDFKZibhQTEyM/d9t2rThgw8+oEmTJi5M5DwpKSns27fP1TGkjFKZiZRSjRo1Ijk5mZUrV7J48WKsVispKSnUqVOHUaNGUadOnSKXnzhxIsuXLyczM5MLFy7w5ptv8sQTTzBu3DgOHjzIsWPHOHHiBI0bN+bRRx/l22+/5fDhwwwYMICwsDBycnIYNWoUycnJmM1mHnjgAQYNGoSXlxdt2rRhzJgx9uLNe1ytWjV69uxJUFAQ27Zt48yZMwwYMIA2bdoQExPDsWPHeOGFF5gyZUpJDKHcRPSZmYgBbNq0iSFDhvDdd9/RuHFjhg8fXuT8R44cYd26dcyYMYPExEReffVVxo4da39+y5YtTJgwgfj4eFavXs2ePXuYOXMmb731lv0w4Keffsrx48dJSEggISEBq9VqvxpNUQ4dOkRAQADz5s3j9ddfZ8SIEZjNZoYNG0b9+vVVZOIU2jMTMQB/f38aNmwIwN///nciIiKKnN/Hx4fY2FgSExM5cOAA27ZtK3Bn8pYtW1K5cmXg4m06AgMDAahfvz5paWkArF69mldffRUPDw/g4t26+/fvf9WsHh4eBAUFAfC3v/3Nvj4RZ9KemYgB5L8SudVqLfD4SrZv307nzp3JyMjA39+fXr16FXje09OzwOO8++Tld+ltO6xWKzk5OfbH+a+El52dbf+3h4cHbm4Xf7W4+vY0cvNQmYkYwPr16+03M5w9ezatW7cucv5NmzZx//33849//INHHnmE5cuXY7FYrmmbgYGBfP311+Tk5GC1Wpk5cyb+/v4AVK9end9++w2ADRs2FLi9R2HMZnOBMhQpTiozEQOoU6cOAwYMICQkhCNHjjB48OAi5w8LCyM1NZWQkBDatWtHxYoVSU9PJyMjw+Ft9u3bl5o1a9KhQwdCQkLIzc1lyJAhALzxxhtMnz6diIgIEhISaNy48VXXd9ddd1GuXDmioqLQ9c2luOmq+SKlXFxcHEuWLGHSpEmujiJSaukEEBGDGjFiBBs2bLjic4MGDcLX17eEE4m4jvbMRETE8PSZmYiIGJ7KTEREDE9lJiIihqcyExERw1OZiYiI4anMRETE8P4fEG/To6pxLp4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Box plot of Tip amount across different payment types\n",
    "mapping = { 1: 'Credit_card', 2: 'Cash', 3: 'No_charge', \\\n",
    "           4: 'Dispute', 5: 'Unknown', 6: 'Voided'}\n",
    "\n",
    "mdata['Payment_type_1'] = mdata['Payment_type'].apply( lambda x: mapping[ x ] )\n",
    "\n",
    "sns.boxplot(x=\"Tip_amount\", y=\"Payment_type_1\", data= mdata )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following boxplot shows that some trips have negative or zero 'Total_amount', especially when 'Payment_type' isn't 'Credit_card'. I'm going to remove these trips since I'm not able to calculate 'Tip_percent' for them.\n",
    "\n",
    "A step further, we can try to replace those zero values with the sum of 'Fare_amount', 'Extra', 'MTA_tax', 'improvement_surcharge', 'Tolls_amount' and 'Tip_amount'. It's not finished in this report due to time limitation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x111272630>"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Box plot of Total amount across different payment types\n",
    "sns.boxplot(x=\"Total_amount\", y=\"Payment_type_1\", data= mdata )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predictive modeling - Derive 'Tip_percent'\n",
    "\n",
    "Given the analysis above, I only kept trips with 'Payment_type' equals one (Credit_card)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(701287, 36)\n"
     ]
    }
   ],
   "source": [
    "# Keep trips with payment type equals credit card\n",
    "mdata_modeling = mdata.loc[ mdata[ 'Payment_type_1'] == 'Credit_card']\n",
    "print( mdata_modeling.shape )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "323 records have non positive values for 'Total_amount', and I removed those records."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(323, 36)\n",
      "(700964, 36)\n"
     ]
    }
   ],
   "source": [
    "# Calculate the number of records with non-positive Total amount.\n",
    "temp = mdata_modeling.loc[ mdata_modeling[ 'Total_amount' ] <= 0 ] \n",
    "print( temp.shape )\n",
    "temp[['Tip_amount', 'Total_amount', 'Trip_distance']].head()\n",
    "\n",
    "# Remove records with Total_amount <= 0\n",
    "mdata_modeling = mdata_modeling.loc[ mdata_modeling[ 'Total_amount'] > 0 ]\n",
    "print( mdata_modeling.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creat 'Tip_percent' for tip as a percentage of the total fare."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creat 'Tip_percent' for tip as a percentage of the total fare.\n",
    "mdata_modeling['Tip_percent'] = mdata_modeling['Tip_amount']/\\\n",
    "                mdata_modeling['Total_amount']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The boxplot shows the Tip_percent is left skewed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x124a48518>"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(ncols=2 )\n",
    "sns.distplot( mdata_modeling[ 'Tip_percent' ], ax = ax1)\n",
    "sns.boxplot(x =mdata_modeling[ 'Tip_percent' ], ax = ax2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predictive modeling - Feature Engineering\n",
    "\n",
    "I kept time related fields created in Q2 for modeling. Specifically, they are: 'Lpep_dropoff_weekday', 'lpep_pickup_weekday', 'lpep_pickup_hours', 'Lpep_dropoff_hour'.\n",
    "\n",
    "I kept distance fields created in Q3 for modeling as well as those location related fields in the original data. Specifically, they are: 'Pickup_To_JFK''Drop_To_JFK', 'Pickup_To_LGA', and 'Drop_To_LGA', 'Is_Pickup_JFK', 'Is_Drop_JFK', 'Is_Pickup_LGA', 'Is_Drop_LGA', 'Is_Airport', 'Pickup_longitude', 'Pickup_latitude', 'Dropoff_longitude', 'Dropoff_latitude'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I think the Tip_percent may be related to the fare amount without tips. Riders usually see the fare amount first, and then decide the tip amount. So I generate a feature named 'Fare_before_tip' with code below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate 'Fare_before_tip'\n",
    "mdata_modeling['Fare_before_tip'] = mdata_modeling['Fare_amount'] + \\\n",
    "        mdata_modeling['Extra'] + mdata_modeling[ 'MTA_tax' ] +\\\n",
    "        mdata_modeling['improvement_surcharge'] + mdata_modeling['Tolls_amount'] "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given the analysis in Q3, I removed records with 0 Pickup_longitude/Pickup_latitude"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove Pickup_longitude/Pickup_latitude with zero values\n",
    "mdata_modeling = mdata_modeling.loc[ ( mdata_modeling[ 'Pickup_longitude'] != 0 ) \\\n",
    "                                    & (mdata_modeling['Pickup_latitude' ] != 0 ) ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For categorical fields, I applied mean encoding to generate numeric values with the code below. (Details of mean encoding: https://www.coursera.org/lecture/competitive-data-science/concept-of-mean-encoding-b5Gxv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "cate_cols = [ 'Store_and_fwd_flag', 'Lpep_dropoff_weekday', \\\n",
    "             'lpep_pickup_weekday', 'lpep_pickup_hours', 'Lpep_dropoff_hour']\n",
    "\n",
    "for col in cate_cols:\n",
    "    agg = mdata_modeling.groupby([ col ], as_index = False )['Tip_percent'].mean()\n",
    "    agg = agg.rename( index=str, columns= {'Tip_percent': col+'ME' })\n",
    "    mdata_modeling = mdata_modeling.merge( agg, how = 'left', on = col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predictive modeling - lightgbm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I applied lightgbm regressor to build a predictive model since lightgbm usually performs well. Instruction of this package is https://lightgbm.readthedocs.io/en/latest/Python-Intro.html\n",
    "\n",
    "I set parameters as follows:\n",
    "* \"num_leaves\" : 30,\n",
    "* \"learning_rate\" : 0.01,\n",
    "* \"bagging_fraction\" : 0.7,\n",
    "* \"feature_fraction\" : 0.7,\n",
    "* \"bagging_frequency\" : 5,\n",
    "\n",
    "I used 4 folds cross validation to evaluate the performance of model via RMSE. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The X variables for regression\n",
    "X_cols = [ 'RateCodeID', 'Pickup_longitude',\n",
    "       'Pickup_latitude', 'Dropoff_longitude', 'Dropoff_latitude',\n",
    "       'Passenger_count', 'Trip_distance', 'Fare_amount', 'Extra',\n",
    "       'MTA_tax',  'Tolls_amount', 'improvement_surcharge',\n",
    "       'Trip_type ', 'Pickup_To_JFK', 'Drop_To_JFK', 'Pickup_To_LGA', 'Drop_To_LGA',\n",
    "       'Is_Pickup_JFK', 'Is_Drop_JFK', 'Is_Pickup_LGA', 'Is_Drop_LGA', \n",
    "       'Time_spent', 'Fare_before_tip','Store_and_fwd_flagME', 'Lpep_dropoff_weekdayME',\n",
    "       'lpep_pickup_weekdayME', 'lpep_pickup_hoursME',\n",
    "       'Lpep_dropoff_hourME']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_lgb(train_X, train_y, val_X, val_y ):\n",
    "    params = {\n",
    "        \"objective\" : \"regression\",\n",
    "        \"metric\" : \"rmse\",\n",
    "        \"num_leaves\" : 30,\n",
    "        \"learning_rate\" : 0.01,\n",
    "        \"bagging_fraction\" : 0.7,\n",
    "        \"feature_fraction\" : 0.7,\n",
    "        \"bagging_frequency\" : 5,\n",
    "        \"bagging_seed\" : 2018,\n",
    "        \"verbosity\" : -1\n",
    "    }\n",
    "    \n",
    "    lgtrain = lgb.Dataset(train_X, label=train_y)\n",
    "    lgval = lgb.Dataset(val_X, label=val_y)\n",
    "    evals_result = {}\n",
    "    model = lgb.train(params, lgtrain, 10000, valid_sets=[lgval],\\\n",
    "                      early_stopping_rounds= 500, verbose_eval=5000,\\\n",
    "                      evals_result=evals_result)\n",
    "    \n",
    "    gain = model.feature_importance('gain')\n",
    "    fold_importance_df = pd.DataFrame({'feature':model.feature_name(), \n",
    "                   'split': model.feature_importance('split'), \n",
    "                   'gain':100 * gain / gain.sum()}).sort_values('gain',\\\n",
    "                                                    ascending=False)\n",
    "    return model, evals_result, fold_importance_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lightgbm_regressor( trainx, trainy ):\n",
    "    kf = model_selection.KFold(n_splits= 4, shuffle=True, random_state=2017)\n",
    "    pred_test_full = 0\n",
    "    feature_importance_df = pd.DataFrame()\n",
    "    for dev_index, val_index in kf.split(trainx):\n",
    "        dev_X, val_X = trainx.loc[dev_index,:], trainx.loc[val_index,:]\n",
    "        dev_y, val_y = trainy[dev_index], trainy[val_index]\n",
    "        model, evals_result, fold_imp_df = run_lgb(dev_X, dev_y, val_X, val_y )\n",
    "        feature_importance_df = pd.concat([feature_importance_df,fold_imp_df],axis=0)\n",
    "    return( feature_importance_df )  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following results show that the cross validation RMSE for 4 folds are: 0.0707, 0.0705, 0.0707, 0.0702. \n",
    "\n",
    "It also shows that if we increase the rounds of running, the performance may be improved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 500 rounds.\n",
      "[5000]\tvalid_0's rmse: 0.0705682\n",
      "[10000]\tvalid_0's rmse: 0.0704006\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[9998]\tvalid_0's rmse: 0.0704006\n",
      "Training until validation scores don't improve for 500 rounds.\n",
      "[5000]\tvalid_0's rmse: 0.0707621\n",
      "[10000]\tvalid_0's rmse: 0.0706159\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[10000]\tvalid_0's rmse: 0.0706159\n",
      "Training until validation scores don't improve for 500 rounds.\n",
      "[5000]\tvalid_0's rmse: 0.0706199\n",
      "[10000]\tvalid_0's rmse: 0.0704828\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[9999]\tvalid_0's rmse: 0.0704828\n",
      "Training until validation scores don't improve for 500 rounds.\n",
      "[5000]\tvalid_0's rmse: 0.0705312\n",
      "[10000]\tvalid_0's rmse: 0.0703892\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[9929]\tvalid_0's rmse: 0.0703886\n"
     ]
    }
   ],
   "source": [
    "# Apply lgboost\n",
    "train_x = mdata_modeling[ X_cols ]\n",
    "train_y = mdata_modeling['Tip_percent']\n",
    "feat_impt_df = lightgbm_regressor( train_x, train_y  )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "lightgbm doesn't return if field has positive or negative impact, but it does return the importance level of fields as follows. \n",
    "\n",
    "The most important ones are 'Fare_amount', 'Dropoff_latitude', 'Fare_before_tip', 'Drop_To_LGA', 'Pickup_latitude', 'Pickup_longitude', which are mainly the location information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>gain</th>\n",
       "      <th>split</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Fare_amount</td>\n",
       "      <td>21.425741</td>\n",
       "      <td>15139.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Dropoff_latitude</td>\n",
       "      <td>9.122492</td>\n",
       "      <td>21724.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Fare_before_tip</td>\n",
       "      <td>7.670212</td>\n",
       "      <td>15087.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Pickup_latitude</td>\n",
       "      <td>6.933870</td>\n",
       "      <td>19160.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Pickup_longitude</td>\n",
       "      <td>6.690003</td>\n",
       "      <td>22537.75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             feature       gain     split\n",
       "                           mean      mean\n",
       "5        Fare_amount  21.425741  15139.25\n",
       "2   Dropoff_latitude   9.122492  21724.50\n",
       "6    Fare_before_tip   7.670212  15087.75\n",
       "17   Pickup_latitude   6.933870  19160.25\n",
       "18  Pickup_longitude   6.690003  22537.75"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show Top 5 features with highest importance level\n",
    "feat_imp_df = feat_impt_df.groupby(['feature'], \\\n",
    "                                   as_index = False ).agg( {'gain': ['mean'],\n",
    "                                                          'split': ['mean']\n",
    "                                                         })\n",
    "feat_imp_df.sort_values(by=[('gain','mean')], ascending=False ).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predictive modeling - ridge rigression\n",
    "I also tried Ridge regression because it can show whether each field has negative or positive impact. Besides, since there are 28 fields and some of them may be not significant, I applied Ridge regression to avoid overfitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove null values of the data.\n",
    "mdata_modeling2 = mdata_modeling.drop( ['Ehail_fee'], axis = 1 )\n",
    "mdata_modeling2 = mdata_modeling2.dropna()\n",
    "train_x2 = mdata_modeling2[X_cols]\n",
    "train_y2 = mdata_modeling2['Tip_percent']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I used cross validation to evaluate the performance of the model. The performance of four folds on validation sets is 0.0771, 0.0763, 0.0767, 0.0768. The performance is not significantly worse than that of lightgbm which is around 0.070.\n",
    "\n",
    "The above conclusion is generated with the code below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cv_ridge( mdata ):\n",
    "    kf = model_selection.KFold(n_splits= 4, shuffle=True, random_state=2017)\n",
    "    rlt = []\n",
    "    for dev_index, val_index in kf.split( mdata ):\n",
    "        dev, val = mdata.loc[dev_index,:], mdata.loc[val_index,:]\n",
    "        dev, val = dev.dropna(), val.dropna()\n",
    "        dev_X, dev_y = dev[X_cols], dev['Tip_percent']\n",
    "        val_X, val_y = val[X_cols], val['Tip_percent']\n",
    "        clf = Ridge(alpha= 0.5 )\n",
    "        clf.fit( dev_X, dev_y ) \n",
    "        val_pred = clf.predict( val_X )\n",
    "        rlt.append( sqrt( (( clf.predict( val_X )- val_y )**2).mean() ) )\n",
    "    return rlt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py:1472: FutureWarning: \n",
      "Passing list-likes to .loc or [] with any missing label will raise\n",
      "KeyError in the future, you can use .reindex() as an alternative.\n",
      "\n",
      "See the documentation here:\n",
      "https://pandas.pydata.org/pandas-docs/stable/indexing.html#deprecate-loc-reindex-listlike\n",
      "  return self._getitem_tuple(key)\n"
     ]
    }
   ],
   "source": [
    "cv_perf = cv_ridge( mdata_modeling2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0770747837846141,\n",
       " 0.0762999995603248,\n",
       " 0.07670629121140374,\n",
       " 0.07680015342771408]"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv_perf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then I used the whole data to build a Ridge regression model and got the coefficients of fields.\n",
    "\n",
    "The coefficient result shows that:\n",
    "\n",
    "* The closer the trip is to airports, the higher the tip percentage. I guess riders taking taxis to airports may have better economy condition since they can afford air flight tickets. \n",
    "\n",
    "* The higher the passenger amount, the higher the tip percentage, which makes sense. \n",
    "\n",
    "* The longer the time spent, the lower the tip percentage. Long trips always make people tired and upset.\n",
    "\n",
    "A step further, we can try to look into the significant level of different fileds, and focus on significant ones. \n",
    "\n",
    "The above conclusion is summarized based on the code below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=0.5, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "   normalize=False, random_state=None, solver='auto', tol=0.001)"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = Ridge(alpha= 0.5 )\n",
    "clf.fit( train_x2, train_y2 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>field</th>\n",
       "      <th>Coef_ridge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Lpep_dropoff_hourME</td>\n",
       "      <td>0.443135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>lpep_pickup_hoursME</td>\n",
       "      <td>0.359518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>lpep_pickup_weekdayME</td>\n",
       "      <td>0.149339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Lpep_dropoff_weekdayME</td>\n",
       "      <td>0.069594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Is_Pickup_JFK</td>\n",
       "      <td>0.050468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>MTA_tax</td>\n",
       "      <td>0.048702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Is_Drop_JFK</td>\n",
       "      <td>0.042265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Is_Pickup_LGA</td>\n",
       "      <td>0.021814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Is_Drop_LGA</td>\n",
       "      <td>0.018302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Store_and_fwd_flagME</td>\n",
       "      <td>0.017235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>RateCodeID</td>\n",
       "      <td>0.003576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Tolls_amount</td>\n",
       "      <td>0.002195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Drop_To_JFK</td>\n",
       "      <td>0.001658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Pickup_To_JFK</td>\n",
       "      <td>0.001118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Trip_distance</td>\n",
       "      <td>0.000651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Fare_amount</td>\n",
       "      <td>0.000342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Passenger_count</td>\n",
       "      <td>0.000318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Pickup_To_LGA</td>\n",
       "      <td>-0.000943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Fare_before_tip</td>\n",
       "      <td>-0.001091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Extra</td>\n",
       "      <td>-0.001700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Drop_To_LGA</td>\n",
       "      <td>-0.001816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Time_spent</td>\n",
       "      <td>-0.002030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Pickup_longitude</td>\n",
       "      <td>-0.006932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Trip_type</td>\n",
       "      <td>-0.046513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>improvement_surcharge</td>\n",
       "      <td>-0.050631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Dropoff_longitude</td>\n",
       "      <td>-0.076246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Dropoff_latitude</td>\n",
       "      <td>-0.159709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Pickup_latitude</td>\n",
       "      <td>-0.162796</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     field  Coef_ridge\n",
       "27     Lpep_dropoff_hourME    0.443135\n",
       "26     lpep_pickup_hoursME    0.359518\n",
       "25   lpep_pickup_weekdayME    0.149339\n",
       "24  Lpep_dropoff_weekdayME    0.069594\n",
       "17           Is_Pickup_JFK    0.050468\n",
       "9                  MTA_tax    0.048702\n",
       "18             Is_Drop_JFK    0.042265\n",
       "19           Is_Pickup_LGA    0.021814\n",
       "20             Is_Drop_LGA    0.018302\n",
       "23    Store_and_fwd_flagME    0.017235\n",
       "0               RateCodeID    0.003576\n",
       "10            Tolls_amount    0.002195\n",
       "14             Drop_To_JFK    0.001658\n",
       "13           Pickup_To_JFK    0.001118\n",
       "6            Trip_distance    0.000651\n",
       "7              Fare_amount    0.000342\n",
       "5          Passenger_count    0.000318\n",
       "15           Pickup_To_LGA   -0.000943\n",
       "22         Fare_before_tip   -0.001091\n",
       "8                    Extra   -0.001700\n",
       "16             Drop_To_LGA   -0.001816\n",
       "21              Time_spent   -0.002030\n",
       "1         Pickup_longitude   -0.006932\n",
       "12              Trip_type    -0.046513\n",
       "11   improvement_surcharge   -0.050631\n",
       "3        Dropoff_longitude   -0.076246\n",
       "4         Dropoff_latitude   -0.159709\n",
       "2          Pickup_latitude   -0.162796"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the coefficients of fields\n",
    "features = pd.DataFrame( train_x2.columns.values , columns = ['field'])\n",
    "features['Coef_ridge'] = clf.coef_\n",
    "features.sort_values(by=[ 'Coef_ridge' ], ascending=False )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Q5: Option A: Distributions of speed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Analyzing the distribution of speed can help identify when the traffic gets base, and help riders and drivers save time.\n",
    "\n",
    "For this analysis, I removed trips with non-positive 'Trip_distance' or non-positive 'Time_spent' because those don't make sense. There are 1.5 million trips in total."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1474191, 36)\n"
     ]
    }
   ],
   "source": [
    "mdata_speed = mdata.loc[ (mdata[ 'Trip_distance' ] > 0 ) &\\\n",
    "                        (mdata[ 'Time_spent' ] > 0 )]\n",
    "\n",
    "print( mdata_speed.shape )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I built a derived variable representing the average speed over the course of a trip with the code below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "# Calculate 'Average_speed' as follows:\n",
    "mdata_speed[ 'Average_speed' ] = mdata_speed.apply( lambda \\\n",
    "                    row: row['Trip_distance'] / row['Time_spent'], axis = 1 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I derived a 'Week_num' feature indicating in which week of September that trip happended with the code below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "mdata_speed[ 'Week_num' ] = mdata_speed.apply( lambda \\\n",
    "                    row: row['lpep_pickup_datetime'].isocalendar()[1], axis = 1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "week_mapping = { 36: '1st', 37: '2nd', 38: '3rd',39: '4th', 40: '5th'}\n",
    "mdata_speed['Week_num_1'] = mdata_speed['Week_num'].apply( lambda\\\n",
    "                                        x: week_mapping[ x ] )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The boxplot below shows that some 'Average_speed' are quite large, which doesn't make sense. So I capped the 'Average_speed' with 200 mile/hour, and removed trips with 'Average_speed' greater than 200 mile/hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2f70fe438>"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=\"Average_speed\", y=\"Week_num_1\", data= mdata_speed )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1471916, 39)\n"
     ]
    }
   ],
   "source": [
    "# removed trips with 'Average_speed' greater than 200 mile/hour\n",
    "mdata_speed2 = mdata_speed.loc[ mdata_speed['Average_speed'] <= 200] \n",
    "print( mdata_speed2.shape )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ANOVA - Average speed across five weeks of September"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first plot below shows the mean of 'Average_speed' across five weeks of September. They look quite different. Quantitatively, I applied ANOVA table to test if the mean of 'Average_speed' is the same across weeks of September. \n",
    "\n",
    "ANOVA table has some strong assumptions: Normality, Homogeneity of variance and Independent observations. \n",
    "\n",
    "* Independent observations can be met since trips are independnet. \n",
    "\n",
    "* The second plot below shows the variance of 'Average_speed' across five weeks of September. The standard deviation of Average_speed across different weeks are similar, ranging from 6.4 to 6.7. \n",
    "\n",
    "* The third plot below is the boxplot of Average_speed for five weeks in September. Based on the third plot below, the distribution is left skewed, but most trips are around 20 miles/hour. So I think all the asumptions are met.\n",
    "\n",
    "If I have extra time, I'd test all of assumptions above strictly and quantitatively. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel/ipkernel.py:208: PerformanceWarning: indexing past lexsort depth may impact performance.\n",
      "  res = shell.run_cell(code, store_history=store_history, silent=silent)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1e39b58d0>"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Week_mean = mdata_speed2.groupby( ['Week_num'],\\\n",
    "                as_index = False ).agg( {'Average_speed': ['mean','std'] })\n",
    "\n",
    "plt.scatter(x = Week_mean[( 'Week_num', )], \\\n",
    "            y = Week_mean[ ( 'Average_speed', 'mean') ])\n",
    "\n",
    "plt.show()\n",
    "\n",
    "plt.scatter(x = Week_mean[( 'Week_num', )], \\\n",
    "            y = Week_mean[ ( 'Average_speed', 'std') ])\n",
    "plt.show()\n",
    "\n",
    "sns.boxplot(x=\"Average_speed\", y=\"Week_num_1\", data= mdata_speed2 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The null hypothesis of ANOVA is that all the group means are not significantly different. The following result shows that the p value is 0.0, which rejects the null hypothesis, and indicates that Average_speed across five weeks of September are different.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=842.9437835883278, pvalue=0.0)"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ANOVA Test\n",
    "import scipy.stats as stats\n",
    "stats.f_oneway( mdata_speed2[ 'Average_speed' ][ mdata_speed2['Week_num_1'] == '1st'], \n",
    "             mdata_speed2[ 'Average_speed' ][ mdata_speed2['Week_num_1'] == '2nd'],\n",
    "             mdata_speed2[ 'Average_speed' ][ mdata_speed2['Week_num_1'] == '3rd'],\n",
    "             mdata_speed2[ 'Average_speed' ][ mdata_speed2['Week_num_1'] == '4th'],\n",
    "             mdata_speed2[ 'Average_speed' ][ mdata_speed2['Week_num_1'] == '5th'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "My hypothesis regarding why they differ: I think Week is not the only point of the difference. There may be other related fields, such as 'lpep_pickup_hours', 'Trip_distance', 'Is_Airport' that lead to the difference. \n",
    "\n",
    "For example, maybe most of the trips in the first week are not around busy traffic time, so the average speed of that week is higher; or maybe the trips in the first week are not around busy locations such as airports."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Average speed as a function of time of day"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hypothesis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "My hypothesis about average trip speed as a function of time of day:\n",
    "\n",
    "I think the relationship is not linear, but the relationship is significant. Trips around 8:00 am and 18:00 may have lower speed than others because people are getting to work or taking off from work at that time and traffic is always bad."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following plot shows that there are about two valleys of 'Average_speed' at around 7:00 - 8:00 am and 16:00 - 18:00, which is consistent with my hypothesis. Besides, the relationship is not linear."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Hour_mean = mdata_speed2.groupby([ 'lpep_pickup_hours' ], \\\n",
    "                                 as_index = False )['Average_speed'].mean()\n",
    "\n",
    "plt.scatter(x = Hour_mean[( 'lpep_pickup_hours')], \\\n",
    "            y = Hour_mean[ ( 'Average_speed') ])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Derive a function between  average speed and time of day"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Time of day is too granular to modeling. So I use 'lpep_pickup_hours' to represent the time of day.\n",
    "\n",
    "I can only take 'lpep_pickup_hours' as X to estimate 'Average_speed' since there are other related fields. Also, I want to keep the interpretability of the function since we may use the result to help avoid heavy traffic. \n",
    "\n",
    "As a starting point, I took 'lpep_pickup_hours', 'Week_num', 'Trip_distance' and 'Is_Airport' to build a linear regression model. \n",
    "\n",
    "I encoded 'lpep_pickup_hours' and 'Week_num' via mean-encoding because the values of hour or week are not linearly related to 'Average_speed'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mean-encode 'lpep_pickup_hours' and 'Week_num'  \n",
    "cate_cols_speed = [ 'lpep_pickup_hours', 'Week_num' ]\n",
    "\n",
    "for col in cate_cols_speed:\n",
    "    agg = mdata_speed2.groupby([ col ], as_index = False )['Average_speed'].mean()\n",
    "    agg = agg.rename( index=str, columns= {'Average_speed': col+'ME' })\n",
    "    mdata_speed2 = mdata_speed2.merge( agg, how = 'left', on = col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The linear regression result below shows that all the fields are significant: \n",
    "\n",
    "* Trips around airports have higher speed which was not as I expected. I think this may be because trips heading to airports avoid busy traffic. \n",
    "\n",
    "* The longer the Trip_distance, the lower the speed. \n",
    "\n",
    "* The Week_num and lpep_pickup_hours are both significant.\n",
    "\n",
    "The warning indicate that there are strong multicollinearity or other numerical problems. If I have extra time, I'd try Lasso or Ridge regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:          Average_speed   R-squared:                   -4680.409\n",
      "Model:                            OLS   Adj. R-squared:              -4680.422\n",
      "Method:                 Least Squares   F-statistic:                -3.679e+05\n",
      "Date:                Mon, 29 Oct 2018   Prob (F-statistic):               1.00\n",
      "Time:                        00:08:58   Log-Likelihood:            -1.1070e+07\n",
      "No. Observations:             1471916   AIC:                         2.214e+07\n",
      "Df Residuals:                 1471911   BIC:                         2.214e+07\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "Intercept             459.7172     12.960     35.472      0.000     434.316     485.119\n",
      "Is_Airport[T.True]      0.7557      0.021     35.471      0.000       0.714       0.797\n",
      "lpep_pickup_hoursME    -0.0002    6.2e-06    -35.471      0.000      -0.000      -0.000\n",
      "Week_numME           4.267e-08    1.2e-09     35.471      0.000    4.03e-08     4.5e-08\n",
      "Trip_distance       -1.857e-07   5.24e-09    -35.474      0.000   -1.96e-07   -1.75e-07\n",
      "==============================================================================\n",
      "Omnibus:                  1708373.305   Durbin-Watson:                   0.000\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        659189708.579\n",
      "Skew:                           5.641   Prob(JB):                         0.00\n",
      "Kurtosis:                     106.058   Cond. No.                     4.61e+08\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 4.61e+08. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "mod = smf.ols(formula='Average_speed ~ lpep_pickup_hoursME + Week_numME \\\n",
    "                + Trip_distance + Is_Airport' , data=mdata_speed2)\n",
    "mod2 = mod.fit()\n",
    "print(mod2.summary())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
